model = dict(
    type='ATSS',
    backbone=dict(
        type='ResNetImg',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPNImg',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5),
    bbox_head=dict(
        type='ATSSZSDHead',
        num_classes=48,
        base_classes=48,
        target_classes=17,
        zero_shot=True,
        generalized_zero_shot=False,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        visual_channels=512,
        word_embedding='/home/zyma/python_work/mmdetection/data/coco/word_embedding.pth',
        temperature=10.0,
        cls_weight=4.0,
        test_with_clip_ve=False,
        test_with_clip_scale=1.0,
        test_with_clip_bg=False,
        background_embedding_fix=True,
        clip_lambda=0.33,
        use_loss_cls = True,
        dist_featuremap = False,
        dist_featuremap_loss='Symmetric_CLLoss', # CL or MSE
        dist_featuremap_pool='mean', # mean or max
        dist_featuremap_patch=4,
        dist_featuremap_tem=10,
        text_type='caption', # caption or noun_phrase
        max_noun_phrases=10, # padding the noun phrases in each senteces to this num.
        captions_path='/home/zyma/python_work/mmdetection/data/coco/annotations/',
        noun_phrases_path = '/home/zyma/python_work/mmdetection/data/coco/',
        dist_instance = False,
        dist_instance_box='pred', # pred or gt
        dist_instance_type='KD_L2Loss',
        dist_instance_weight=1.0,
        dist_instance_size=1.0,
        instance_iou_thresh = 0.5,
        anchor_generator=dict(
            type='AnchorGenerator',
            ratios=[1.0],
            octave_base_scale=8,
            scales_per_octave=1,
            strides=[8, 16, 32, 64, 128]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[.0, .0, .0, .0],
            target_stds=[0.1, 0.1, 0.2, 0.2]),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        score_prob='centerness',
        score_sort='prob+cls', # prob: centerness score or iou score, cls: classification score, cls+prob: combination of prob and cls 
        loss_cls_sample=False,
        loss_cls_sample_per=0,
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        loss_centerness=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),
    # training and testing settings
    train_cfg=dict(
        assigner=dict(type='ATSSAssigner', topk=9),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.6),
        max_per_img=100))